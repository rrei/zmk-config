#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500
#define ZMK_POINTING_DEFAULT_SCRL_VAL 30

#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        bt_clear_profile: bt_clear_profile {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_CLEAR_PROFILE";
            #binding-cells = <0>;
            bindings = <&none>, <&bt BT_CLR>, <&bt BT_CLR>, <&bt BT_CLR_ALL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp TAB         &kp Q        &kp W        &kp E          &kp R           &kp T             &kp Y            &kp U           &kp I          &kp O        &kp P                &kp F16
&mt LSHIFT ESC  &mt LSHFT A  &mt LCTRL S  &lt 1 D        &lt 2 F         &kp G             &kp H            &lt 2 J         &lt 1 K        &mt RCTRL L  &mt RSHFT SEMICOLON  &kp APOS
&lt 3 GRAVE     &kp Z        &kp X        &kp C          &kp V           &kp B             &kp N            &kp M           &kp COMMA      &kp DOT      &kp SLASH            &lt 3 BACKSLASH
                                          &mt LALT LBKT  &mt LCMD MINUS  &mt LCTRL BSPC    &mt RCTRL SPACE  &mt RCMD EQUAL  &mt RALT RBKT
            >;
        };

        navigation {
            bindings = <
&trans  &kp C_VOL_UP        &msc SCRL_RIGHT  &mmv MOVE_UP      &msc SCRL_LEFT   &msc SCRL_DOWN    &kp PG_UP      &kp HOME   &kp UP    &kp END      &kp C_BRIGHTNESS_INC        &trans
&trans  &mt LSHFT C_VOL_DN  &mmv MOVE_LEFT   &mmv MOVE_DOWN    &mmv MOVE_RIGHT  &msc SCRL_UP      &kp PG_DN      &kp LEFT   &kp DOWN  &lt 4 RIGHT  &mt RSHFT C_BRIGHTNESS_DEC  &trans
&trans  &kp C_MUTE          &kp C_PREV       &kp C_PLAY_PAUSE  &kp C_NEXT       &trans            &mkp RCLK      &mkp LCLK  &trans    &trans       &trans                      &trans
                                             &trans            &trans           &mt LCTRL DEL     &mt RCTRL RET  &trans     &trans
            >;
        };

        numbers {
            bindings = <
&trans     &kp F1           &kp F2        &kp F3         &kp F4          &kp F5           &kp F6         &kp F7         &kp F8         &kp F9        &kp F10       &kp F11
&trans     &mt LSHFT N1     &mt LCTRL N2  &kp N3         &kp N4          &kp N5           &kp N6         &kp N7         &kp N8         &mt RCTRL N9  &mt RSHFT N0  &kp F12
&kp TILDE  &kp EXCLAMATION  &kp AT_SIGN   &kp POUND      &kp DOLLAR      &kp PERCENT      &kp CARET      &kp AMPERSAND  &kp ASTERISK   &kp LPAR      &kp RPAR      &kp PIPE
                                          &mt LALT LBRC  &mt LCMD UNDER  &mt LCTRL DEL    &mt RCTRL RET  &mt RCMD PLUS  &mt RALT RBRC
            >;
        };

        bluetooth {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &none  &none  &none  &none  &bt_clear_profile
&none  &none         &none         &none         &none         &none           &none  &none  &none  &none  &none  &none
&none  &none         &none         &none         &none         &none           &none  &none  &none  &none  &none  &none
                                   &none         &none         &none           &none  &none  &none
            >;
        };

        precision {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};

&mt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <300>;
    require-prior-idle-ms = <100>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <300>;
    require-prior-idle-ms = <100>;
};

&mmv_input_listener {
    precision {
        layers = <4>;
        input-processors = <&zip_xy_scaler 1 3>;
    };
};

&msc_input_listener {
    precision {
        layers = <4>;
        input-processors = <&zip_scroll_scaler 1 3>;
    };
};
