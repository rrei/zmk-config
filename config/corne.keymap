#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800
#define ZMK_POINTING_DEFAULT_SCRL_VAL 24

#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        bt_clr: bt_clr {
            compatible = "zmk,behavior-tap-dance";
            label = "bt_clr";
            #binding-cells = <0>;
            bindings = <&none>, <&bt BT_CLR>, <&none>, <&bt BT_CLR_ALL>;
        };

        bspc_nav_ext: bspc_nav_ext {
            compatible = "zmk,behavior-tap-dance";
            label = "bspc_nav_ext";
            #binding-cells = <0>;
            bindings = <&lt 2 BSPC>, <&mo 1>;
        };

        spc_ext_nav: spc_ext_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "spc_ext_nav";
            #binding-cells = <0>;
            bindings = <&lt 1 SPACE>, <&mo 2>;
        };
    };

    combos {
        compatible = "zmk,combos";

        f16 {
            bindings = <&kp F16>;
            key-positions = <3 4>;
            layers = <0>;
        };

        backspace {
            bindings = <&kp BSPC>;
            key-positions = <16 15>;
            layers = <0>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <16 17>;
            layers = <0>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <19 20>;
            layers = <0>;
        };

        enter {
            bindings = <&kp RET>;
            key-positions = <7 8>;
            layers = <0>;
        };

        left_click {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
            slow-release;
            layers = <2 3>;
        };

        right_click {
            bindings = <&mkp RCLK>;
            key-positions = <7 8>;
            slow-release;
            layers = <2 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp TAB          &kp Q        &kp W        &mt LALT E     &kp R          &kp T            &kp Y         &kp U           &mt RALT I      &kp O        &kp P           &kp BACKSLASH
&mt LSHFT ESC    &mt LSHFT A  &mt LCTRL S  &lt 2 D        &mt LCMD F     &kp G            &kp H         &mt RCMD J      &lt 2 K         &mt RCTRL L  &mt RSHFT SEMI  &mt RSHFT APOS
&mt LCTRL GRAVE  &kp Z        &kp X        &kp C          &kp V          &kp B            &kp N         &kp M           &kp COMMA       &kp DOT      &kp SLASH       &mt RCTRL RET
                                           &mt LALT LBKT  &mt LCMD RBKT  &bspc_nav_ext    &spc_ext_nav  &mt RCMD MINUS  &mt RALT EQUAL
            >;
        };

        extended {
            bindings = <
&trans           &kp F1        &kp F2        &mt LALT F3    &kp F4         &kp F5       &kp F6     &kp F7          &mt RALT F8    &kp F9        &kp F10       &kp F11
&trans           &mt LSHFT N1  &mt LCTRL N2  &kp N3         &mt LCMD N4    &kp N5       &kp N6     &mt RCMD N7     &kp N8         &mt RCTRL N9  &mt RSHFT N0  &mt RSHFT F12
&mt LCTRL TILDE  &kp EXCL      &kp AT        &kp HASH       &kp DLLR       &kp PRCNT    &kp CARET  &kp AMPS        &kp STAR       &kp LPAR      &kp RPAR      &trans
                                             &mt LALT LBRC  &mt LCMD RBRC  &lt 4 DEL    &lt 4 RET  &mt RCMD UNDER  &mt RALT PLUS
            >;
        };

        navigation {
            bindings = <
&trans  &trans  &msc SCRL_RIGHT  &mmv MOVE_UP    &msc SCRL_LEFT   &msc SCRL_DOWN    &kp PG_UP  &kp HOME        &kp UP         &kp END    &trans  &trans
&trans  &mo 3   &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP      &kp PG_DN  &kp LEFT        &kp DOWN       &kp RIGHT  &trans  &trans
&trans  &trans  &trans           &trans          &mkp LCLK        &mkp RCLK         &mkp RCLK  &mkp LCLK       &trans         &trans     &trans  &trans
                                 &mt LALT LBRC   &mt LCMD RBRC    &lt 4 DEL         &lt 4 RET  &mt RCMD UNDER  &mt RALT PLUS
            >;
        };

        precision {
            bindings = <
&trans  &trans  &msc SCRL_RIGHT  &mmv MOVE_UP    &msc SCRL_LEFT   &msc SCRL_DOWN    &kp PG_UP  &kp HOME        &kp UP         &kp END    &trans  &trans
&trans  &mo 3   &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP      &kp PG_DN  &kp LEFT        &kp DOWN       &kp RIGHT  &trans  &trans
&trans  &trans  &trans           &trans          &mkp LCLK        &mkp RCLK         &mkp RCLK  &mkp LCLK       &trans         &trans     &trans  &trans
                                 &mt LALT LBRC   &mt LCMD RBRC    &lt 4 DEL         &lt 4 RET  &mt RCMD UNDER  &mt RALT PLUS
            >;
        };

        controls {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &kp C_VOL_UP  &kp C_BRI_UP  &none  &none  &bt_clr
&none  &none         &kp C_PREV    &kp C_PP      &kp C_NEXT    &none           &none  &kp C_VOL_DN  &kp C_BRI_DN  &none  &none  &none
&none  &none         &none         &none         &none         &none           &none  &kp C_MUTE    &none         &none  &none  &soft_off
                                   &none         &none         &none           &none  &none         &none
            >;
        };
    };
};

&mt {
    flavor = "balanced";
    tapping-term-ms = <300>;
    quick-tap-ms = <300>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <300>;
    quick-tap-ms = <300>;
};

&mmv_input_listener {
    precision {
        layers = <3>;
        input-processors = <&zip_xy_scaler 1 3>;
    };
};

&msc_input_listener {
    precision {
        layers = <3>;
        input-processors = <&zip_scroll_scaler 1 3>;
    };
};

&soft_off {
    hold-time-ms = <3000>;

    /delete-property/ split-peripheral-off-on-press;
};

&kscan0 { wakeup-source; };
