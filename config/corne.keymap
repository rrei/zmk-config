// Define names for layers instead of using the numbers directly.
#define BASE 0
#define EXT 1
#define NAV 2
#define PREC 3
#define SYS 4
#define IDLE 5

// Parameters that I want to make easily editable and attach a logical name to.
#define COMBO_REQUIRE_PRIOR_IDLE_MS 100
#define COMBO_FAST_TIMEOUT_MS 25
#define COMBO_SLOW_TIMEOUT_MS 75
#define HOLD_TAP_REQUIRE_PRIOR_IDLE_MS 100
#define HOLD_TAP_TAPPING_TERM_MS 300
#define HOLD_TAP_QUICK_TAP_MS 300
#define SOFT_OFF_HOLD_TIME_MS 3000

// ZMK mouse emulation params, which need to be defined before including
// `dt-bindings/zmk/pointing.h`.
#define ZMK_POINTING_DEFAULT_MOVE_VAL 1800
#define ZMK_POINTING_DEFAULT_SCRL_VAL 24

#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        bt_clr: bt_clr {
            compatible = "zmk,behavior-tap-dance";
            label = "bt_clr";
            #binding-cells = <0>;
            bindings = <&none>, <&bt BT_CLR>, <&none>, <&bt BT_CLR_ALL>;
        };
    };

    combos {
        compatible = "zmk,combos";

        kp_tab {
            bindings = <&kp TAB>;
            key-positions = <3 4>;
            layers = <BASE EXT>;
            require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
            timeout-ms = <COMBO_FAST_TIMEOUT_MS>;
        };

        kp_bspc {
            bindings = <&kp BSPC>;
            key-positions = <15 16>;
            layers = <BASE EXT>;
            require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
            timeout-ms = <COMBO_FAST_TIMEOUT_MS>;
        };

        kp_del {
            bindings = <&kp DEL>;
            key-positions = <16 17>;
            layers = <BASE EXT>;
            require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
            timeout-ms = <COMBO_FAST_TIMEOUT_MS>;
        };

        kp_space {
            bindings = <&kp SPACE>;
            key-positions = <19 20>;
            layers = <BASE EXT>;
            require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
            timeout-ms = <COMBO_FAST_TIMEOUT_MS>;
        };

        kp_ret {
            bindings = <&kp RET>;
            key-positions = <8 7>;
            layers = <BASE EXT>;
            require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
            timeout-ms = <COMBO_FAST_TIMEOUT_MS>;
        };

        kp_lpar {
            bindings = <&kp LPAR>;
            key-positions = <14 15>;
            layers = <BASE EXT>;
            require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
            timeout-ms = <COMBO_FAST_TIMEOUT_MS>;
        };

        kp_rpar {
            bindings = <&kp RPAR>;
            key-positions = <20 21>;
            layers = <BASE EXT>;
            require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
            timeout-ms = <COMBO_FAST_TIMEOUT_MS>;
        };

        tog_idle {
            bindings = <&tog IDLE>;
            key-positions = <17 18>;
            layers = <SYS IDLE>;
            require-prior-idle-ms = <COMBO_REQUIRE_PRIOR_IDLE_MS>;
            timeout-ms = <COMBO_SLOW_TIMEOUT_MS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp TAB          &kp Q        &kp W        &mt LALT E     &kp R          &kp T           &kp Y          &kp U            &mt RALT I       &kp O         &kp P           &kp BACKSLASH
&mt LSHFT ESC    &mt LSHFT A  &mt LCTRL S  &lt NAV D      &mt LCMD F     &kp G           &kp H          &mt RCMD J       &lt NAV K        &mt RCTRL L   &mt RSHFT SEMI  &mt RSHFT APOS
&mt LCTRL GRAVE  &lt PREC Z   &kp X        &kp C          &kp V          &kp B           &kp N          &kp M            &lt NAV COMMA    &lt PREC DOT  &kp SLASH       &mt RCTRL RET
                                           &mt LALT LBKT  &mt LCMD RBKT  &lt EXT BSPC    &lt EXT SPACE  &mt RSHFT MINUS  &mt RCTRL EQUAL
            >;
        };

        extended {
            bindings = <
&trans  &kp F1        &kp F2        &mt LALT F3  &kp F4       &kp F5          &kp F6         &kp F7       &mt RALT F8  &kp F9        &kp F10       &kp F11
&trans  &mt LSHFT N1  &mt LCTRL N2  &kp N3       &mt LCMD N4  &kp N5          &kp N6         &mt RCMD N7  &kp N8       &mt RCTRL N9  &mt RSHFT N0  &mt RSHFT F12
&trans  &trans        &trans        &trans       &trans       &trans          &trans         &trans       &trans       &trans        &trans        &trans
                                    &trans       &trans       &lt NAV BSPC    &lt NAV SPACE  &trans       &trans
            >;
        };

        navigation {
            bindings = <
&trans  &trans  &msc SCRL_RIGHT  &mmv MOVE_UP    &msc SCRL_LEFT   &msc SCRL_DOWN    &kp PG_UP      &kp HOME   &kp UP    &kp END    &trans  &trans
&trans  &trans  &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP      &kp PG_DN      &kp LEFT   &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans  &trans           &trans          &mkp LCLK        &mkp RCLK         &mkp RCLK      &mkp LCLK  &trans    &trans     &trans  &trans
                                 &trans          &trans           &lt NAV BSPC      &lt NAV SPACE  &trans     &trans
            >;
        };

        precision {
            bindings = <
&trans  &trans  &msc SCRL_RIGHT  &mmv MOVE_UP    &msc SCRL_LEFT   &msc SCRL_DOWN    &kp PG_UP      &kp HOME   &kp UP    &kp END    &trans  &trans
&trans  &trans  &mmv MOVE_LEFT   &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_UP      &kp PG_DN      &kp LEFT   &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans  &trans           &trans          &mkp LCLK        &mkp RCLK         &mkp RCLK      &mkp LCLK  &trans    &trans     &trans  &trans
                                 &trans          &trans           &lt NAV BSPC      &lt NAV SPACE  &trans     &trans
            >;
        };

        system {
            bindings = <
&bt_clr     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &kp C_VOL_UP  &kp C_BRI_UP  &none  &none  &soft_off
&none       &none         &kp C_PREV    &kp C_PP      &kp C_NEXT    &none           &none  &kp C_VOL_DN  &kp C_BRI_DN  &none  &none  &none
&sys_reset  &none         &none         &none         &none         &none           &none  &kp C_MUTE    &none         &none  &none  &sys_reset
                                        &none         &none         &none           &none  &none         &none
            >;
        };

        idle {
            bindings = <
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
&none  &none  &none  &none  &none  &none    &none  &none  &none  &none  &none  &none
                     &none  &none  &none    &none  &none  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        cond_sys {
            if-layers = <EXT NAV>;
            then-layer = <SYS>;
        };
    };
};

&mt {
    flavor = "balanced";
    tapping-term-ms = <HOLD_TAP_TAPPING_TERM_MS>;
    quick-tap-ms = <HOLD_TAP_QUICK_TAP_MS>;
    require-prior-idle-ms = <HOLD_TAP_REQUIRE_PRIOR_IDLE_MS>;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <HOLD_TAP_TAPPING_TERM_MS>;
    quick-tap-ms = <HOLD_TAP_QUICK_TAP_MS>;
    require-prior-idle-ms = <HOLD_TAP_REQUIRE_PRIOR_IDLE_MS>;
};

&mmv_input_listener {
    precision {
        layers = <PREC>;
        input-processors = <&zip_xy_scaler 1 3>;
    };
};

&msc_input_listener {
    precision {
        layers = <PREC>;
        input-processors = <&zip_scroll_scaler 1 3>;
    };
};

&soft_off {
    hold-time-ms = <SOFT_OFF_HOLD_TIME_MS>;

    /delete-property/ split-peripheral-off-on-press;
};

&kscan0 { wakeup-source; };
